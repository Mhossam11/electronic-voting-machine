
Electronic voting machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000a08  00000a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000aac  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c68  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003df  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bf  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f7  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000632  00000000  00000000  00002f8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cf 02 	call	0x59e	; 0x59e <main>
  8a:	0c 94 02 05 	jmp	0xa04	; 0xa04 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
 */ 
#include <avr/io.h>
#include "MACRO.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinumber,unsigned char direction)
{
	switch(portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vsetPINDir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPINDir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetPINDir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPINDir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vsetPINDir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPINDir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetPINDir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetPINDir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetPINDir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPINDir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPINDir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetPINDir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetPINDir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPINDir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vsetPINDir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetPINDir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetPINDir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vsetPINDir+0xe8>
	{
		case'A':
		case'a':
		if(direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetPINDir+0x58>
		{
			SET_BIT(DDRA,pinumber);//Set direction of this pin as output
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPINDir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPINDir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinumber);//Set direction of this pin as input
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPINDir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPINDir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		
		case'B':
		case'b':
		if(direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetPINDir+0x92>
		{
			SET_BIT(DDRB,pinumber);//Set direction of this pin as output
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPINDir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPINDir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinumber);//Set direction of this pin as input
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPINDir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPINDir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		
		case'C':
		case'c':
		if(direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetPINDir+0xcc>
		{
			SET_BIT(DDRC,pinumber);//Set direction of this pin as output
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPINDir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPINDir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinumber);//Set direction of this pin as input
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPINDir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPINDir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		
		case'D':
		case'd':
		if(direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetPINDir+0x106>
		{
			SET_BIT(DDRD,pinumber);//Set direction of this pin as output
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetPINDir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetPINDir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinumber);//Set direction of this pin as input
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetPINDir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetPINDir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_write+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_write+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_write+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_write+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_write+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_write+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_write+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_write+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_write+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_write+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_write+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_write+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_write+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_write+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_write+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_write+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_write+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_write+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_write+0xe8>
	{
		case'A':
		case'a':
		if(outputvalue == 1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_write+0x58>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High=1
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_write+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_write+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else 
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as low=0
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(outputvalue == 1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_write+0x92>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High=1
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_write+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_write+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as low=0
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_write+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_write+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(outputvalue == 1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_write+0xcc>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High=1
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_write+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_write+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as low=0
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_write+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_write+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(outputvalue == 1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_write+0x106>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High=1
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_write+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_write+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as low=0
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)     //u8 3shan hya 8 bit
{
	unsigned char return_value=0;
	switch(portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_u8read+0x6>
 2da:	4e c0       	rjmp	.+156    	; 0x378 <DIO_u8read+0xa2>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_u8read+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	31 f1       	breq	.+76     	; 0x330 <DIO_u8read+0x5a>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	b0 f5       	brcc	.+108    	; 0x354 <DIO_u8read+0x7e>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_u8read+0x18>
 2ec:	57 c0       	rjmp	.+174    	; 0x39c <DIO_u8read+0xc6>
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_u8read+0x36>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	f1 f0       	breq	.+60     	; 0x330 <DIO_u8read+0x5a>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	20 f4       	brcc	.+8      	; 0x300 <DIO_u8read+0x2a>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_u8read+0x28>
 2fc:	4f c0       	rjmp	.+158    	; 0x39c <DIO_u8read+0xc6>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <DIO_u8read+0x36>
 300:	83 36       	cpi	r24, 0x63	; 99
 302:	41 f1       	breq	.+80     	; 0x354 <DIO_u8read+0x7e>
 304:	84 36       	cpi	r24, 0x64	; 100
 306:	09 f0       	breq	.+2      	; 0x30a <DIO_u8read+0x34>
 308:	49 c0       	rjmp	.+146    	; 0x39c <DIO_u8read+0xc6>
 30a:	36 c0       	rjmp	.+108    	; 0x378 <DIO_u8read+0xa2>
	{
		case'A':
		case'a':
		return_value=READ_BIT(PINA,pinnumber);  //read value from given pin in PORTA
 30c:	29 b3       	in	r18, 0x19	; 25
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8read+0x44>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8read+0x40>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8read+0x54>
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8read+0x50>
		break;
 32e:	08 95       	ret
		case'B':
		case'b':
		return_value=READ_BIT(PINB,pinnumber);  //read value from given pin in PORTB
 330:	26 b3       	in	r18, 0x16	; 22
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	06 2e       	mov	r0, r22
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8read+0x68>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8read+0x64>
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	82 23       	and	r24, r18
 346:	93 23       	and	r25, r19
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8read+0x78>
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8read+0x74>
		break;
 352:	08 95       	ret
		case'C':
		case'c':
		return_value=READ_BIT(PINC,pinnumber);  //read value from given pin in PORTC
 354:	23 b3       	in	r18, 0x13	; 19
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	06 2e       	mov	r0, r22
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_u8read+0x8c>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_u8read+0x88>
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	82 23       	and	r24, r18
 36a:	93 23       	and	r25, r19
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_u8read+0x9c>
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_u8read+0x98>
		break;
 376:	08 95       	ret
		case'D':
		case'd':
		return_value=READ_BIT(PIND,pinnumber);  //read value from given pin in PORTD
 378:	20 b3       	in	r18, 0x10	; 16
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	06 2e       	mov	r0, r22
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_u8read+0xb0>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_u8read+0xac>
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	82 23       	and	r24, r18
 38e:	93 23       	and	r25, r19
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8read+0xc0>
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8read+0xbc>
		break;
 39a:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)     //u8 3shan hya 8 bit
{
	unsigned char return_value=0;
 39c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
 39e:	08 95       	ret

000003a0 <DIO_toggle>:


void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 3a0:	84 34       	cpi	r24, 0x44	; 68
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <DIO_toggle+0x6>
 3a4:	3d c0       	rjmp	.+122    	; 0x420 <DIO_toggle+0x80>
 3a6:	85 34       	cpi	r24, 0x45	; 69
 3a8:	40 f4       	brcc	.+16     	; 0x3ba <DIO_toggle+0x1a>
 3aa:	82 34       	cpi	r24, 0x42	; 66
 3ac:	f9 f0       	breq	.+62     	; 0x3ec <DIO_toggle+0x4c>
 3ae:	83 34       	cpi	r24, 0x43	; 67
 3b0:	50 f5       	brcc	.+84     	; 0x406 <DIO_toggle+0x66>
 3b2:	81 34       	cpi	r24, 0x41	; 65
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <DIO_toggle+0x18>
 3b6:	40 c0       	rjmp	.+128    	; 0x438 <DIO_toggle+0x98>
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <DIO_toggle+0x32>
 3ba:	82 36       	cpi	r24, 0x62	; 98
 3bc:	b9 f0       	breq	.+46     	; 0x3ec <DIO_toggle+0x4c>
 3be:	83 36       	cpi	r24, 0x63	; 99
 3c0:	18 f4       	brcc	.+6      	; 0x3c8 <DIO_toggle+0x28>
 3c2:	81 36       	cpi	r24, 0x61	; 97
 3c4:	c9 f5       	brne	.+114    	; 0x438 <DIO_toggle+0x98>
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <DIO_toggle+0x32>
 3c8:	83 36       	cpi	r24, 0x63	; 99
 3ca:	e9 f0       	breq	.+58     	; 0x406 <DIO_toggle+0x66>
 3cc:	84 36       	cpi	r24, 0x64	; 100
 3ce:	a1 f5       	brne	.+104    	; 0x438 <DIO_toggle+0x98>
 3d0:	27 c0       	rjmp	.+78     	; 0x420 <DIO_toggle+0x80>
	{
		case'A':
		case'a':
		TOG_BIT(PORTA,pinnumber);
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	ac 01       	movw	r20, r24
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_toggle+0x40>
 3dc:	44 0f       	add	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_toggle+0x3c>
 3e4:	ba 01       	movw	r22, r20
 3e6:	62 27       	eor	r22, r18
 3e8:	6b bb       	out	0x1b, r22	; 27
		break;
 3ea:	08 95       	ret
		case'B':
		case'b':
		TOG_BIT(PORTB,pinnumber);
 3ec:	28 b3       	in	r18, 0x18	; 24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_toggle+0x5a>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_toggle+0x56>
 3fe:	ba 01       	movw	r22, r20
 400:	62 27       	eor	r22, r18
 402:	68 bb       	out	0x18, r22	; 24
		break;
 404:	08 95       	ret
		case'C':
		case'c':
		TOG_BIT(PORTC,pinnumber);
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_toggle+0x74>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_toggle+0x70>
 418:	ba 01       	movw	r22, r20
 41a:	62 27       	eor	r22, r18
 41c:	65 bb       	out	0x15, r22	; 21
		break;
 41e:	08 95       	ret
		case'D':
		case'd':
		TOG_BIT(PORTD,pinnumber);
 420:	22 b3       	in	r18, 0x12	; 18
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	ac 01       	movw	r20, r24
 428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_toggle+0x8e>
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_toggle+0x8a>
 432:	ba 01       	movw	r22, r20
 434:	62 27       	eor	r22, r18
 436:	62 bb       	out	0x12, r22	; 18
 438:	08 95       	ret

0000043a <DIO_set_port_direction>:
}


void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	d9 f0       	breq	.+54     	; 0x474 <DIO_set_port_direction+0x3a>
 43e:	85 34       	cpi	r24, 0x45	; 69
 440:	38 f4       	brcc	.+14     	; 0x450 <DIO_set_port_direction+0x16>
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	99 f0       	breq	.+38     	; 0x46c <DIO_set_port_direction+0x32>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	98 f4       	brcc	.+38     	; 0x470 <DIO_set_port_direction+0x36>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	a1 f4       	brne	.+40     	; 0x476 <DIO_set_port_direction+0x3c>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <DIO_set_port_direction+0x2e>
 450:	82 36       	cpi	r24, 0x62	; 98
 452:	61 f0       	breq	.+24     	; 0x46c <DIO_set_port_direction+0x32>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_set_port_direction+0x24>
 458:	81 36       	cpi	r24, 0x61	; 97
 45a:	69 f4       	brne	.+26     	; 0x476 <DIO_set_port_direction+0x3c>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <DIO_set_port_direction+0x2e>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_set_port_direction+0x36>
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	41 f4       	brne	.+16     	; 0x476 <DIO_set_port_direction+0x3c>
 466:	06 c0       	rjmp	.+12     	; 0x474 <DIO_set_port_direction+0x3a>
	{
		case'A':
		case'a':
		DDRA=direction;      //set direction of all PORTA
 468:	6a bb       	out	0x1a, r22	; 26
		break;
 46a:	08 95       	ret
		case'B':
		case'b':
		DDRB=direction;      //set direction of all PORTB
 46c:	67 bb       	out	0x17, r22	; 23
		break;
 46e:	08 95       	ret
		case'C':
		case'c':
		DDRC=direction;      //set direction of all PORTC
 470:	64 bb       	out	0x14, r22	; 20
		break;
 472:	08 95       	ret
		case'D':
		case'd':
		DDRD=direction;      //set direction of all PORTD
 474:	61 bb       	out	0x11, r22	; 17
 476:	08 95       	ret

00000478 <DIO_write_port>:
	}
}

void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	d9 f0       	breq	.+54     	; 0x4b2 <DIO_write_port+0x3a>
 47c:	85 34       	cpi	r24, 0x45	; 69
 47e:	38 f4       	brcc	.+14     	; 0x48e <DIO_write_port+0x16>
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	99 f0       	breq	.+38     	; 0x4aa <DIO_write_port+0x32>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	98 f4       	brcc	.+38     	; 0x4ae <DIO_write_port+0x36>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	a1 f4       	brne	.+40     	; 0x4b4 <DIO_write_port+0x3c>
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <DIO_write_port+0x2e>
 48e:	82 36       	cpi	r24, 0x62	; 98
 490:	61 f0       	breq	.+24     	; 0x4aa <DIO_write_port+0x32>
 492:	83 36       	cpi	r24, 0x63	; 99
 494:	18 f4       	brcc	.+6      	; 0x49c <DIO_write_port+0x24>
 496:	81 36       	cpi	r24, 0x61	; 97
 498:	69 f4       	brne	.+26     	; 0x4b4 <DIO_write_port+0x3c>
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_write_port+0x2e>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	39 f0       	breq	.+14     	; 0x4ae <DIO_write_port+0x36>
 4a0:	84 36       	cpi	r24, 0x64	; 100
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <DIO_write_port+0x3c>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <DIO_write_port+0x3a>
	{
		case'A':
		case'a':
		PORTA=portvalue;   //Write the given value to the portA 
 4a6:	6b bb       	out	0x1b, r22	; 27
		break;
 4a8:	08 95       	ret
		case'B':
		case'b':
		PORTB=portvalue;   //Write the given value to the portB
 4aa:	68 bb       	out	0x18, r22	; 24
		break;
 4ac:	08 95       	ret
		case'C':
		case'c':
		PORTC=portvalue;   //Write the given value to the portC
 4ae:	65 bb       	out	0x15, r22	; 21
		break;
 4b0:	08 95       	ret
		case'D':
		case'd':
		PORTD=portvalue;   //Write the given value to the portD
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_value=0;
	switch(portname)
 4b6:	84 34       	cpi	r24, 0x44	; 68
 4b8:	d9 f0       	breq	.+54     	; 0x4f0 <DIO_read_port+0x3a>
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	38 f4       	brcc	.+14     	; 0x4cc <DIO_read_port+0x16>
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <DIO_read_port+0x32>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	98 f4       	brcc	.+38     	; 0x4ec <DIO_read_port+0x36>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <DIO_read_port+0x3e>
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <DIO_read_port+0x2e>
 4cc:	82 36       	cpi	r24, 0x62	; 98
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <DIO_read_port+0x32>
 4d0:	83 36       	cpi	r24, 0x63	; 99
 4d2:	18 f4       	brcc	.+6      	; 0x4da <DIO_read_port+0x24>
 4d4:	81 36       	cpi	r24, 0x61	; 97
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <DIO_read_port+0x3e>
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <DIO_read_port+0x2e>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	39 f0       	breq	.+14     	; 0x4ec <DIO_read_port+0x36>
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <DIO_read_port+0x3e>
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <DIO_read_port+0x3a>
	{
		case'A':
		case'a':
		return_value=PINA;    // read the value of portA
 4e4:	89 b3       	in	r24, 0x19	; 25
		break;
 4e6:	08 95       	ret
		case'B':
		case'b':
		return_value=PINB;    // read the value of portB
 4e8:	86 b3       	in	r24, 0x16	; 22
		break;
 4ea:	08 95       	ret
		case'C':
		case'c':
		return_value=PINC;    // read the value of portC
 4ec:	83 b3       	in	r24, 0x13	; 19
		break;
 4ee:	08 95       	ret
		case'D':
		case'd':
		return_value=PIND;    // read the value of portD
 4f0:	80 b3       	in	r24, 0x10	; 16
		break;
 4f2:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_value=0;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
		default:
		break;
		
	}
	return return_value;
}
 4f6:	08 95       	ret

000004f8 <write_low_nibble>:

 void write_low_nibble(unsigned char portname,unsigned char value)
  {
	  value&=0x0f;
 4f8:	6f 70       	andi	r22, 0x0F	; 15
	 switch(portname)
 4fa:	82 34       	cpi	r24, 0x42	; 66
 4fc:	89 f0       	breq	.+34     	; 0x520 <write_low_nibble+0x28>
 4fe:	83 34       	cpi	r24, 0x43	; 67
 500:	18 f4       	brcc	.+6      	; 0x508 <write_low_nibble+0x10>
 502:	81 34       	cpi	r24, 0x41	; 65
 504:	09 f5       	brne	.+66     	; 0x548 <write_low_nibble+0x50>
 506:	05 c0       	rjmp	.+10     	; 0x512 <write_low_nibble+0x1a>
 508:	83 34       	cpi	r24, 0x43	; 67
 50a:	89 f0       	breq	.+34     	; 0x52e <write_low_nibble+0x36>
 50c:	84 34       	cpi	r24, 0x44	; 68
 50e:	e1 f4       	brne	.+56     	; 0x548 <write_low_nibble+0x50>
 510:	15 c0       	rjmp	.+42     	; 0x53c <write_low_nibble+0x44>
	  {
		  case 'A':
		  PORTA&=0xf0;
 512:	8b b3       	in	r24, 0x1b	; 27
 514:	80 7f       	andi	r24, 0xF0	; 240
 516:	8b bb       	out	0x1b, r24	; 27
		  PORTA|=value;
 518:	8b b3       	in	r24, 0x1b	; 27
 51a:	68 2b       	or	r22, r24
 51c:	6b bb       	out	0x1b, r22	; 27
		  break;
 51e:	08 95       	ret
		  case 'B':
		  PORTB&=0xf0;
 520:	88 b3       	in	r24, 0x18	; 24
 522:	80 7f       	andi	r24, 0xF0	; 240
 524:	88 bb       	out	0x18, r24	; 24
		  PORTB|=value;
 526:	88 b3       	in	r24, 0x18	; 24
 528:	68 2b       	or	r22, r24
 52a:	68 bb       	out	0x18, r22	; 24
		  break;
 52c:	08 95       	ret
		  case 'C':
		  PORTC&=0xf0;
 52e:	85 b3       	in	r24, 0x15	; 21
 530:	80 7f       	andi	r24, 0xF0	; 240
 532:	85 bb       	out	0x15, r24	; 21
		  PORTC|=value;
 534:	85 b3       	in	r24, 0x15	; 21
 536:	68 2b       	or	r22, r24
 538:	65 bb       	out	0x15, r22	; 21
		  break;
 53a:	08 95       	ret
		  case 'D':
		  PORTD&=0xf0;
 53c:	82 b3       	in	r24, 0x12	; 18
 53e:	80 7f       	andi	r24, 0xF0	; 240
 540:	82 bb       	out	0x12, r24	; 18
		  PORTD|=value;
 542:	82 b3       	in	r24, 0x12	; 18
 544:	68 2b       	or	r22, r24
 546:	62 bb       	out	0x12, r22	; 18
 548:	08 95       	ret

0000054a <write_high_nibble>:
	  }
  }
  
   void write_high_nibble(unsigned char portname,unsigned char value)
    {
	    value<<=4;
 54a:	62 95       	swap	r22
 54c:	60 7f       	andi	r22, 0xF0	; 240
	    switch(portname)
 54e:	82 34       	cpi	r24, 0x42	; 66
 550:	89 f0       	breq	.+34     	; 0x574 <write_high_nibble+0x2a>
 552:	83 34       	cpi	r24, 0x43	; 67
 554:	18 f4       	brcc	.+6      	; 0x55c <write_high_nibble+0x12>
 556:	81 34       	cpi	r24, 0x41	; 65
 558:	09 f5       	brne	.+66     	; 0x59c <write_high_nibble+0x52>
 55a:	05 c0       	rjmp	.+10     	; 0x566 <write_high_nibble+0x1c>
 55c:	83 34       	cpi	r24, 0x43	; 67
 55e:	89 f0       	breq	.+34     	; 0x582 <write_high_nibble+0x38>
 560:	84 34       	cpi	r24, 0x44	; 68
 562:	e1 f4       	brne	.+56     	; 0x59c <write_high_nibble+0x52>
 564:	15 c0       	rjmp	.+42     	; 0x590 <write_high_nibble+0x46>
	    {
		    case 'A':
		    PORTA&=0x0f;
 566:	8b b3       	in	r24, 0x1b	; 27
 568:	8f 70       	andi	r24, 0x0F	; 15
 56a:	8b bb       	out	0x1b, r24	; 27
		    PORTA|=value;
 56c:	8b b3       	in	r24, 0x1b	; 27
 56e:	68 2b       	or	r22, r24
 570:	6b bb       	out	0x1b, r22	; 27
		    break;
 572:	08 95       	ret
		    case 'B':
		    PORTB&=0x0f;
 574:	88 b3       	in	r24, 0x18	; 24
 576:	8f 70       	andi	r24, 0x0F	; 15
 578:	88 bb       	out	0x18, r24	; 24
		    PORTB|=value;
 57a:	88 b3       	in	r24, 0x18	; 24
 57c:	68 2b       	or	r22, r24
 57e:	68 bb       	out	0x18, r22	; 24
		    break;
 580:	08 95       	ret
		    case 'C':
		    PORTC&=0x0f;
 582:	85 b3       	in	r24, 0x15	; 21
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	85 bb       	out	0x15, r24	; 21
		    PORTC|=value;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	68 2b       	or	r22, r24
 58c:	65 bb       	out	0x15, r22	; 21
		    break;
 58e:	08 95       	ret
		    case 'D':
		    PORTD&=0x0f;
 590:	82 b3       	in	r24, 0x12	; 18
 592:	8f 70       	andi	r24, 0x0F	; 15
 594:	82 bb       	out	0x12, r24	; 18
		    PORTD|=value;
 596:	82 b3       	in	r24, 0x12	; 18
 598:	68 2b       	or	r22, r24
 59a:	62 bb       	out	0x12, r22	; 18
 59c:	08 95       	ret

0000059e <main>:
unsigned char  counter4 = 0;


int main(void)
{
	LCD_vInt();				 //initialize LCD
 59e:	0e 94 3e 04 	call	0x87c	; 0x87c <LCD_vInt>
	button_vInt('D',0);		//initialize buttons A,B,C,D,RESET
 5a2:	84 e4       	ldi	r24, 0x44	; 68
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <button_vInt>
	button_vInt('D',1);
 5aa:	84 e4       	ldi	r24, 0x44	; 68
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <button_vInt>
	button_vInt('D',2);
 5b2:	84 e4       	ldi	r24, 0x44	; 68
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <button_vInt>
	button_vInt('D',3);
 5ba:	84 e4       	ldi	r24, 0x44	; 68
 5bc:	63 e0       	ldi	r22, 0x03	; 3
 5be:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <button_vInt>
	button_vInt('D',4);
 5c2:	84 e4       	ldi	r24, 0x44	; 68
 5c4:	64 e0       	ldi	r22, 0x04	; 4
 5c6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <button_vInt>
	
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_OFF);	//to hide cursor
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
	
	LCD_vSend_String("A=0");		//printing voting names and number of votes 
 5d0:	80 e6       	ldi	r24, 0x60	; 96
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
	LCD_vMove_Cursor(1,13);			
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	6d e0       	ldi	r22, 0x0D	; 13
 5dc:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
	LCD_vSend_String("B=0");
 5e0:	84 e6       	ldi	r24, 0x64	; 100
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
	LCD_vMove_Cursor(2,1);
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
	LCD_vSend_String("C=0");
 5f0:	88 e6       	ldi	r24, 0x68	; 104
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
	LCD_vMove_Cursor(2,13);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	6d e0       	ldi	r22, 0x0D	; 13
 5fc:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
	LCD_vSend_String("D=0");
 600:	8c e6       	ldi	r24, 0x6C	; 108
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
	else if(button_u8read('D',4) == 1)
	{
		LCD_vSend_cmd(CLR_SCREEN);
		counter1=counter2=counter3=counter4=0; //to start count from beggining 
		LCD_vMove_Cursor(1,1);
		LCD_vSend_String("A=0");		//printing voting names and number of votes
 608:	00 e6       	ldi	r16, 0x60	; 96
 60a:	10 e0       	ldi	r17, 0x00	; 0
		LCD_vMove_Cursor(1,13);
		LCD_vSend_String("B=0");
 60c:	0f 2e       	mov	r0, r31
 60e:	f4 e6       	ldi	r31, 0x64	; 100
 610:	ef 2e       	mov	r14, r31
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ff 2e       	mov	r15, r31
 616:	f0 2d       	mov	r31, r0
		LCD_vMove_Cursor(2,1);
		LCD_vSend_String("C=0");
 618:	0f 2e       	mov	r0, r31
 61a:	f8 e6       	ldi	r31, 0x68	; 104
 61c:	cf 2e       	mov	r12, r31
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	df 2e       	mov	r13, r31
 622:	f0 2d       	mov	r31, r0
		LCD_vMove_Cursor(2,13);
		LCD_vSend_String("D=0");	
 624:	0f 2e       	mov	r0, r31
 626:	fc e6       	ldi	r31, 0x6C	; 108
 628:	af 2e       	mov	r10, r31
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	bf 2e       	mov	r11, r31
 62e:	f0 2d       	mov	r31, r0
		}
		else if(counter4<100)				//to print if number of votes less than 100
		{
			counter4++;
			LCD_vMove_Cursor(2,15);
			LCD_vSend_char(counter4/10+48);//to send ASCI code of tens place to the LCD
 630:	ca e0       	ldi	r28, 0x0A	; 10
	LCD_vSend_String("C=0");
	LCD_vMove_Cursor(2,13);
	LCD_vSend_String("D=0");
    while(1)
    {	
		if(button_u8read('D',0) == 1)  //read the value of button A
 632:	84 e4       	ldi	r24, 0x44	; 68
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <button_u8read>
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	69 f5       	brne	.+90     	; 0x698 <main+0xfa>
		{
			if(counter1<9)				//to print if number of votes less than 10
 63e:	80 91 73 00 	lds	r24, 0x0073
 642:	89 30       	cpi	r24, 0x09	; 9
 644:	68 f4       	brcc	.+26     	; 0x660 <main+0xc2>
			{
			counter1++;
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 73 00 	sts	0x0073, r24
			LCD_vMove_Cursor(1,3);
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	63 e0       	ldi	r22, 0x03	; 3
 650:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter1+48); //to send ASCI code to the LCD
 654:	80 91 73 00 	lds	r24, 0x0073
 658:	80 5d       	subi	r24, 0xD0	; 208
 65a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 65e:	e1 c0       	rjmp	.+450    	; 0x822 <main+0x284>
			}
			else if(counter1<100)				//to print if number of votes less than 100
 660:	84 36       	cpi	r24, 0x64	; 100
 662:	08 f0       	brcs	.+2      	; 0x666 <main+0xc8>
 664:	de c0       	rjmp	.+444    	; 0x822 <main+0x284>
			{
				counter1++;
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 93 73 00 	sts	0x0073, r24
				LCD_vMove_Cursor(1,3);
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	63 e0       	ldi	r22, 0x03	; 3
 670:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
				LCD_vSend_char(counter1/10+48);//to send ASCI code of tens place to the LCD
 674:	80 91 73 00 	lds	r24, 0x0073
 678:	6c 2f       	mov	r22, r28
 67a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 67e:	80 5d       	subi	r24, 0xD0	; 208
 680:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
				LCD_vSend_char(counter1%10+48);//to send ASCI code of units place to the LCD
 684:	80 91 73 00 	lds	r24, 0x0073
 688:	6c 2f       	mov	r22, r28
 68a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 68e:	89 2f       	mov	r24, r25
 690:	80 5d       	subi	r24, 0xD0	; 208
 692:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 696:	c5 c0       	rjmp	.+394    	; 0x822 <main+0x284>
			}			
		}
	
	else if(button_u8read('D',1) == 1)  //read the value of button B
 698:	84 e4       	ldi	r24, 0x44	; 68
 69a:	61 e0       	ldi	r22, 0x01	; 1
 69c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <button_u8read>
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	69 f5       	brne	.+90     	; 0x6fe <main+0x160>
	{
		if(counter2<9)				//to print if number of votes less than 10
 6a4:	80 91 72 00 	lds	r24, 0x0072
 6a8:	89 30       	cpi	r24, 0x09	; 9
 6aa:	68 f4       	brcc	.+26     	; 0x6c6 <main+0x128>
		{
			counter2++;
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
 6ae:	80 93 72 00 	sts	0x0072, r24
			LCD_vMove_Cursor(1,15);
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	6f e0       	ldi	r22, 0x0F	; 15
 6b6:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter2+48); //to send ASCI code to the LCD
 6ba:	80 91 72 00 	lds	r24, 0x0072
 6be:	80 5d       	subi	r24, 0xD0	; 208
 6c0:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 6c4:	ae c0       	rjmp	.+348    	; 0x822 <main+0x284>
		}
		else if(counter2<100)				//to print if number of votes less than 100
 6c6:	84 36       	cpi	r24, 0x64	; 100
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <main+0x12e>
 6ca:	ab c0       	rjmp	.+342    	; 0x822 <main+0x284>
		{
			counter2++;
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	80 93 72 00 	sts	0x0072, r24
			LCD_vMove_Cursor(1,15);
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	6f e0       	ldi	r22, 0x0F	; 15
 6d6:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter2/10+48);//to send ASCI code of tens place to the LCD
 6da:	80 91 72 00 	lds	r24, 0x0072
 6de:	6c 2f       	mov	r22, r28
 6e0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
			LCD_vSend_char(counter2%10+48);//to send ASCI code of units place to the LCD
 6ea:	80 91 72 00 	lds	r24, 0x0072
 6ee:	6c 2f       	mov	r22, r28
 6f0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 6f4:	89 2f       	mov	r24, r25
 6f6:	80 5d       	subi	r24, 0xD0	; 208
 6f8:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 6fc:	92 c0       	rjmp	.+292    	; 0x822 <main+0x284>
		}
	}
	
	else if(button_u8read('D',2) == 1)  //read the value of button C
 6fe:	84 e4       	ldi	r24, 0x44	; 68
 700:	62 e0       	ldi	r22, 0x02	; 2
 702:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <button_u8read>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	69 f5       	brne	.+90     	; 0x764 <main+0x1c6>
	{
		if(counter3<9)				//to print if number of votes less than 10
 70a:	80 91 71 00 	lds	r24, 0x0071
 70e:	89 30       	cpi	r24, 0x09	; 9
 710:	68 f4       	brcc	.+26     	; 0x72c <main+0x18e>
		{
			counter3++;
 712:	8f 5f       	subi	r24, 0xFF	; 255
 714:	80 93 71 00 	sts	0x0071, r24
			LCD_vMove_Cursor(2,3);
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	63 e0       	ldi	r22, 0x03	; 3
 71c:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter3+48); //to send ASCI code to the LCD
 720:	80 91 71 00 	lds	r24, 0x0071
 724:	80 5d       	subi	r24, 0xD0	; 208
 726:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 72a:	7b c0       	rjmp	.+246    	; 0x822 <main+0x284>
		}
		else if(counter3<100)				//to print if number of votes less than 100
 72c:	84 36       	cpi	r24, 0x64	; 100
 72e:	08 f0       	brcs	.+2      	; 0x732 <main+0x194>
 730:	78 c0       	rjmp	.+240    	; 0x822 <main+0x284>
		{
			counter3++;
 732:	8f 5f       	subi	r24, 0xFF	; 255
 734:	80 93 71 00 	sts	0x0071, r24
			LCD_vMove_Cursor(2,3);
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	63 e0       	ldi	r22, 0x03	; 3
 73c:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter3/10+48);//to send ASCI code of tens place to the LCD
 740:	80 91 71 00 	lds	r24, 0x0071
 744:	6c 2f       	mov	r22, r28
 746:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 74a:	80 5d       	subi	r24, 0xD0	; 208
 74c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
			LCD_vSend_char(counter3%10+48);//to send ASCI code of units place to the LCD
 750:	80 91 71 00 	lds	r24, 0x0071
 754:	6c 2f       	mov	r22, r28
 756:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 75a:	89 2f       	mov	r24, r25
 75c:	80 5d       	subi	r24, 0xD0	; 208
 75e:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 762:	5f c0       	rjmp	.+190    	; 0x822 <main+0x284>
		}
	}
		
	else if(button_u8read('D',3) == 1)  //read the value of button D
 764:	84 e4       	ldi	r24, 0x44	; 68
 766:	63 e0       	ldi	r22, 0x03	; 3
 768:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <button_u8read>
 76c:	81 30       	cpi	r24, 0x01	; 1
 76e:	69 f5       	brne	.+90     	; 0x7ca <main+0x22c>
	{
		if(counter4<9)				//to print if number of votes less than 10
 770:	80 91 70 00 	lds	r24, 0x0070
 774:	89 30       	cpi	r24, 0x09	; 9
 776:	68 f4       	brcc	.+26     	; 0x792 <main+0x1f4>
		{
			counter4++;
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	80 93 70 00 	sts	0x0070, r24
			LCD_vMove_Cursor(2,15);
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	6f e0       	ldi	r22, 0x0F	; 15
 782:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter4+48); //to send ASCI code to the LCD
 786:	80 91 70 00 	lds	r24, 0x0070
 78a:	80 5d       	subi	r24, 0xD0	; 208
 78c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 790:	48 c0       	rjmp	.+144    	; 0x822 <main+0x284>
		}
		else if(counter4<100)				//to print if number of votes less than 100
 792:	84 36       	cpi	r24, 0x64	; 100
 794:	08 f0       	brcs	.+2      	; 0x798 <main+0x1fa>
 796:	45 c0       	rjmp	.+138    	; 0x822 <main+0x284>
		{
			counter4++;
 798:	8f 5f       	subi	r24, 0xFF	; 255
 79a:	80 93 70 00 	sts	0x0070, r24
			LCD_vMove_Cursor(2,15);
 79e:	82 e0       	ldi	r24, 0x02	; 2
 7a0:	6f e0       	ldi	r22, 0x0F	; 15
 7a2:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
			LCD_vSend_char(counter4/10+48);//to send ASCI code of tens place to the LCD
 7a6:	80 91 70 00 	lds	r24, 0x0070
 7aa:	6c 2f       	mov	r22, r28
 7ac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 7b0:	80 5d       	subi	r24, 0xD0	; 208
 7b2:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
			LCD_vSend_char(counter4%10+48);//to send ASCI code of units place to the LCD
 7b6:	80 91 70 00 	lds	r24, 0x0070
 7ba:	6c 2f       	mov	r22, r28
 7bc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodqi4>
 7c0:	89 2f       	mov	r24, r25
 7c2:	80 5d       	subi	r24, 0xD0	; 208
 7c4:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
 7c8:	2c c0       	rjmp	.+88     	; 0x822 <main+0x284>
		}
	}
	
	else if(button_u8read('D',4) == 1)
 7ca:	84 e4       	ldi	r24, 0x44	; 68
 7cc:	64 e0       	ldi	r22, 0x04	; 4
 7ce:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <button_u8read>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	31 f5       	brne	.+76     	; 0x822 <main+0x284>
	{
		LCD_vSend_cmd(CLR_SCREEN);
 7d6:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
		counter1=counter2=counter3=counter4=0; //to start count from beggining 
 7da:	10 92 70 00 	sts	0x0070, r1
 7de:	10 92 71 00 	sts	0x0071, r1
 7e2:	10 92 72 00 	sts	0x0072, r1
 7e6:	10 92 73 00 	sts	0x0073, r1
		LCD_vMove_Cursor(1,1);
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
		LCD_vSend_String("A=0");		//printing voting names and number of votes
 7f2:	c8 01       	movw	r24, r16
 7f4:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
		LCD_vMove_Cursor(1,13);
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	6d e0       	ldi	r22, 0x0D	; 13
 7fc:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
		LCD_vSend_String("B=0");
 800:	c7 01       	movw	r24, r14
 802:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
		LCD_vMove_Cursor(2,1);
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	61 e0       	ldi	r22, 0x01	; 1
 80a:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
		LCD_vSend_String("C=0");
 80e:	c6 01       	movw	r24, r12
 810:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
		LCD_vMove_Cursor(2,13);
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	6d e0       	ldi	r22, 0x0D	; 13
 818:	0e 94 cd 04 	call	0x99a	; 0x99a <LCD_vMove_Cursor>
		LCD_vSend_String("D=0");	
 81c:	c5 01       	movw	r24, r10
 81e:	0e 94 b4 04 	call	0x968	; 0x968 <LCD_vSend_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	91 ee       	ldi	r25, 0xE1	; 225
 826:	a4 e0       	ldi	r26, 0x04	; 4
 828:	81 50       	subi	r24, 0x01	; 1
 82a:	90 40       	sbci	r25, 0x00	; 0
 82c:	a0 40       	sbci	r26, 0x00	; 0
 82e:	e1 f7       	brne	.-8      	; 0x828 <main+0x28a>
 830:	00 c0       	rjmp	.+0      	; 0x832 <main+0x294>
 832:	00 00       	nop
 834:	fe ce       	rjmp	.-516    	; 0x632 <main+0x94>

00000836 <send_falling_edge>:
	
}

static void  send_falling_edge(void)
{
	DIO_write('B',EN,1);
 836:	82 e4       	ldi	r24, 0x42	; 66
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
 840:	8f e9       	ldi	r24, 0x9F	; 159
 842:	9f e0       	ldi	r25, 0x0F	; 15
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <send_falling_edge+0xe>
 848:	00 c0       	rjmp	.+0      	; 0x84a <send_falling_edge+0x14>
 84a:	00 00       	nop
	_delay_ms(2);								//lazm el delay da 
	DIO_write('B',EN,0);
 84c:	82 e4       	ldi	r24, 0x42	; 66
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
 856:	8f e9       	ldi	r24, 0x9F	; 159
 858:	9f e0       	ldi	r25, 0x0F	; 15
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	f1 f7       	brne	.-4      	; 0x85a <send_falling_edge+0x24>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
 860:	00 00       	nop
	_delay_ms(2);
}
 862:	08 95       	ret

00000864 <LCD_vSend_cmd>:

void LCD_vSend_cmd(char cmd)
{
 864:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port(PORTNAME,cmd);
 866:	81 e4       	ldi	r24, 0x41	; 65
 868:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write_port>
	DIO_write('B',RS,0);					//3shan yktb yktb 3la el command 3latol
 86c:	82 e4       	ldi	r24, 0x42	; 66
 86e:	61 e0       	ldi	r22, 0x01	; 1
 870:	40 e0       	ldi	r20, 0x00	; 0
 872:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	send_falling_edge();
 876:	0e 94 1b 04 	call	0x836	; 0x836 <send_falling_edge>
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);                     //msh lazm bs e7tyate
	send_falling_edge();					//msh lazm bs e7tyate
	_delay_ms(1);                          //msh lazm bs e7tyate
	#endif
}
 87a:	08 95       	ret

0000087c <LCD_vInt>:
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	91 ee       	ldi	r25, 0xE1	; 225
 880:	a4 e0       	ldi	r26, 0x04	; 4
 882:	81 50       	subi	r24, 0x01	; 1
 884:	90 40       	sbci	r25, 0x00	; 0
 886:	a0 40       	sbci	r26, 0x00	; 0
 888:	e1 f7       	brne	.-8      	; 0x882 <LCD_vInt+0x6>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <LCD_vInt+0x10>
 88c:	00 00       	nop
{
	_delay_ms(200);									//da lazm zae ma 2al fel data sheet
	
	#if defined eight_bits_mode
	//DIO_set_port_direction(PORTNAME,1);
	DIO_vsetPINDir(PORTNAME,0,1);
 88e:	81 e4       	ldi	r24, 0x41	; 65
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	41 e0       	ldi	r20, 0x01	; 1
 894:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,1,1);
 898:	81 e4       	ldi	r24, 0x41	; 65
 89a:	61 e0       	ldi	r22, 0x01	; 1
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,2,1);
 8a2:	81 e4       	ldi	r24, 0x41	; 65
 8a4:	62 e0       	ldi	r22, 0x02	; 2
 8a6:	41 e0       	ldi	r20, 0x01	; 1
 8a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,3,1);
 8ac:	81 e4       	ldi	r24, 0x41	; 65
 8ae:	63 e0       	ldi	r22, 0x03	; 3
 8b0:	41 e0       	ldi	r20, 0x01	; 1
 8b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,4,1);
 8b6:	81 e4       	ldi	r24, 0x41	; 65
 8b8:	64 e0       	ldi	r22, 0x04	; 4
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,5,1);
 8c0:	81 e4       	ldi	r24, 0x41	; 65
 8c2:	65 e0       	ldi	r22, 0x05	; 5
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,6,1);
 8ca:	81 e4       	ldi	r24, 0x41	; 65
 8cc:	66 e0       	ldi	r22, 0x06	; 6
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(PORTNAME,7,1);
 8d4:	81 e4       	ldi	r24, 0x41	; 65
 8d6:	67 e0       	ldi	r22, 0x07	; 7
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 8de:	82 e4       	ldi	r24, 0x42	; 66
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	41 e0       	ldi	r20, 0x01	; 1
 8e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 8e8:	82 e4       	ldi	r24, 0x42	; 66
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	41 e0       	ldi	r20, 0x01	; 1
 8ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 8f2:	82 e4       	ldi	r24, 0x42	; 66
 8f4:	62 e0       	ldi	r22, 0x02	; 2
 8f6:	41 e0       	ldi	r20, 0x01	; 1
 8f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write('B',RW,0);							//3shan a3ml write fa wslha GRND
 8fc:	82 e4       	ldi	r24, 0x42	; 66
 8fe:	62 e0       	ldi	r22, 0x02	; 2
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS);						 //b3rfo enha 8 bit 0x38
 906:	88 e3       	ldi	r24, 0x38	; 56
 908:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
 90c:	af ec       	ldi	r26, 0xCF	; 207
 90e:	b7 e0       	ldi	r27, 0x07	; 7
 910:	11 97       	sbiw	r26, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <LCD_vInt+0x94>
 914:	00 c0       	rjmp	.+0      	; 0x916 <LCD_vInt+0x9a>
 916:	00 00       	nop
	_delay_ms(1);									 //lazm delay b3d kol command 3shan ynfzo
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON);				//byzhr el cursor
 918:	8e e0       	ldi	r24, 0x0E	; 14
 91a:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
 91e:	8f ec       	ldi	r24, 0xCF	; 207
 920:	97 e0       	ldi	r25, 0x07	; 7
 922:	01 97       	sbiw	r24, 0x01	; 1
 924:	f1 f7       	brne	.-4      	; 0x922 <LCD_vInt+0xa6>
 926:	00 c0       	rjmp	.+0      	; 0x928 <LCD_vInt+0xac>
 928:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);						//bms7 el 3la el LCD felwawl awl m3ml int
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
 930:	af e1       	ldi	r26, 0x1F	; 31
 932:	be e4       	ldi	r27, 0x4E	; 78
 934:	11 97       	sbiw	r26, 0x01	; 1
 936:	f1 f7       	brne	.-4      	; 0x934 <LCD_vInt+0xb8>
 938:	00 c0       	rjmp	.+0      	; 0x93a <LCD_vInt+0xbe>
 93a:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE);						//byw2f el cursor flawl 
 93c:	86 e0       	ldi	r24, 0x06	; 6
 93e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
 942:	8f ec       	ldi	r24, 0xCF	; 207
 944:	97 e0       	ldi	r25, 0x07	; 7
 946:	01 97       	sbiw	r24, 0x01	; 1
 948:	f1 f7       	brne	.-4      	; 0x946 <LCD_vInt+0xca>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_vInt+0xd0>
 94c:	00 00       	nop
	_delay_ms(20);
	LCD_vSend_cmd(ENTRY_MODE);
	_delay_ms(1);
	#endif
	
}
 94e:	08 95       	ret

00000950 <LCD_vSend_char>:
	_delay_ms(1);                          //msh lazm bs e7tyate
	#endif
}

void LCD_vSend_char(char data)
{
 950:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port(PORTNAME,data);
 952:	81 e4       	ldi	r24, 0x41	; 65
 954:	0e 94 3c 02 	call	0x478	; 0x478 <DIO_write_port>
	DIO_write('B',RS,1);					 //3shan aktb f el data register 3aks el fo2 kan 0 3shan aktb f el command 
 958:	82 e4       	ldi	r24, 0x42	; 66
 95a:	61 e0       	ldi	r22, 0x01	; 1
 95c:	41 e0       	ldi	r20, 0x01	; 1
 95e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	send_falling_edge();
 962:	0e 94 1b 04 	call	0x836	; 0x836 <send_falling_edge>
	write_high_nibble('A',data);
	DIO_write('B',RS,1);                     //msh lazm bs e7tyate
	send_falling_edge();					//msh lazm bs e7tyate
	_delay_ms(1);                          //msh lazm bs e7tyate
	#endif
}
 966:	08 95       	ret

00000968 <LCD_vSend_String>:

void LCD_vSend_String(char *data)     //mlhash 3laka 4 wala 8 bit
{
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	ec 01       	movw	r28, r24
	while((*data) != '\0')				//law mwslsh ll NULL ykml
 96e:	88 81       	ld	r24, Y
 970:	88 23       	and	r24, r24
 972:	31 f0       	breq	.+12     	; 0x980 <LCD_vSend_String+0x18>
	send_falling_edge();					//msh lazm bs e7tyate
	_delay_ms(1);                          //msh lazm bs e7tyate
	#endif
}

void LCD_vSend_String(char *data)     //mlhash 3laka 4 wala 8 bit
 974:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data) != '\0')				//law mwslsh ll NULL ykml
	{
		LCD_vSend_char(*data);
 976:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vSend_char>
	#endif
}

void LCD_vSend_String(char *data)     //mlhash 3laka 4 wala 8 bit
{
	while((*data) != '\0')				//law mwslsh ll NULL ykml
 97a:	89 91       	ld	r24, Y+
 97c:	88 23       	and	r24, r24
 97e:	d9 f7       	brne	.-10     	; 0x976 <LCD_vSend_String+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	08 95       	ret

00000986 <LCD_vClearScreen>:

void LCD_vClearScreen(void)				//mlhash 3laka 4 wala 8 bit
{
	LCD_vSend_cmd(CLR_SCREEN);
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
 98c:	8f e1       	ldi	r24, 0x1F	; 31
 98e:	9e e4       	ldi	r25, 0x4E	; 78
 990:	01 97       	sbiw	r24, 0x01	; 1
 992:	f1 f7       	brne	.-4      	; 0x990 <LCD_vClearScreen+0xa>
 994:	00 c0       	rjmp	.+0      	; 0x996 <LCD_vClearScreen+0x10>
 996:	00 00       	nop
	_delay_ms(10);
}
 998:	08 95       	ret

0000099a <LCD_vMove_Cursor>:

void LCD_vMove_Cursor(char row , char coloumn)      //mlhash 3laka 4 wala 8 bit
{
	char data;
	if (row>2 || row<1 || /*coloumn>16 ||*/ coloumn<1)  //3SHAN LAW HABET AKTB 3LA EL LOCTION EL HIDDEN 3NDE
 99a:	28 2f       	mov	r18, r24
 99c:	21 50       	subi	r18, 0x01	; 1
 99e:	22 30       	cpi	r18, 0x02	; 2
 9a0:	60 f4       	brcc	.+24     	; 0x9ba <LCD_vMove_Cursor+0x20>
 9a2:	66 23       	and	r22, r22
 9a4:	61 f0       	breq	.+24     	; 0x9be <LCD_vMove_Cursor+0x24>
	{
		data=0X80;									//el cursour yo2f 3la awl 5ana
	}
	else if(row==1)
 9a6:	81 30       	cpi	r24, 0x01	; 1
 9a8:	19 f4       	brne	.+6      	; 0x9b0 <LCD_vMove_Cursor+0x16>
	{
		data= 0X80 + coloumn-1;
 9aa:	96 2f       	mov	r25, r22
 9ac:	91 58       	subi	r25, 0x81	; 129
 9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <LCD_vMove_Cursor+0x26>
	} 
	else if(row==2)
 9b0:	82 30       	cpi	r24, 0x02	; 2
 9b2:	31 f4       	brne	.+12     	; 0x9c0 <LCD_vMove_Cursor+0x26>
	{
		data= 0XC0 + coloumn-1;
 9b4:	96 2f       	mov	r25, r22
 9b6:	91 54       	subi	r25, 0x41	; 65
 9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <LCD_vMove_Cursor+0x26>
void LCD_vMove_Cursor(char row , char coloumn)      //mlhash 3laka 4 wala 8 bit
{
	char data;
	if (row>2 || row<1 || /*coloumn>16 ||*/ coloumn<1)  //3SHAN LAW HABET AKTB 3LA EL LOCTION EL HIDDEN 3NDE
	{
		data=0X80;									//el cursour yo2f 3la awl 5ana
 9ba:	90 e8       	ldi	r25, 0x80	; 128
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <LCD_vMove_Cursor+0x26>
 9be:	90 e8       	ldi	r25, 0x80	; 128
	} 
	else if(row==2)
	{
		data= 0XC0 + coloumn-1;
	}
	LCD_vSend_cmd(data);
 9c0:	89 2f       	mov	r24, r25
 9c2:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSend_cmd>
 9c6:	8f ec       	ldi	r24, 0xCF	; 207
 9c8:	97 e0       	ldi	r25, 0x07	; 7
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	f1 f7       	brne	.-4      	; 0x9ca <LCD_vMove_Cursor+0x30>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <LCD_vMove_Cursor+0x36>
 9d0:	00 00       	nop
	_delay_ms(1);
 9d2:	08 95       	ret

000009d4 <button_vInt>:
 * Created: 2/8/2023 6:25:51 PM
 *  Author: 20100
 */ 
void button_vInt(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,0);
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	40 e0       	ldi	r20, 0x00	; 0
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
 9e0:	08 95       	ret

000009e2 <button_u8read>:
unsigned char  button_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char x;
	x= DIO_u8read(portname,pinnumber);
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_u8read>
	return x;
 9ea:	08 95       	ret

000009ec <__udivmodqi4>:
 9ec:	99 1b       	sub	r25, r25
 9ee:	79 e0       	ldi	r23, 0x09	; 9
 9f0:	04 c0       	rjmp	.+8      	; 0x9fa <__udivmodqi4_ep>

000009f2 <__udivmodqi4_loop>:
 9f2:	99 1f       	adc	r25, r25
 9f4:	96 17       	cp	r25, r22
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <__udivmodqi4_ep>
 9f8:	96 1b       	sub	r25, r22

000009fa <__udivmodqi4_ep>:
 9fa:	88 1f       	adc	r24, r24
 9fc:	7a 95       	dec	r23
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__udivmodqi4_loop>
 a00:	80 95       	com	r24
 a02:	08 95       	ret

00000a04 <_exit>:
 a04:	f8 94       	cli

00000a06 <__stop_program>:
 a06:	ff cf       	rjmp	.-2      	; 0xa06 <__stop_program>
